#!/bin/sh

#alias \
#gs='git stat' \
#gsw='git switch' \
#gsw-new='git switch --orphan' \
#gsw-commit='git switch --detach' \
#gw='git worktree' \
#gl='git log-short' \
#ga='git add' \
#gc='git commit --allow-empty --allow-empty-message' \
#

set -eu
case ${1-} in --help)
printf %s\\n \
	"Usage ${0##*/} <action=value> [git args]..." \
	"" \
	"actions:" \
	"stat|status:" \
	"  calls \`git <stat|status>\`" \
	"switch:" \
	"  If branch does not already exist will ask to create it first [y/N]." \
	"  If 2 non args provided then will assume second one is the hash source for the new commit." \
	"  And then will call \`git switch \$@\`." \
	"switch-new:" \
	"  If branch already exist will ask to remove old one [Y/n], unless --force provided." \
	"  If 2 non args provided then will assume second one is the hash source for the new commit." \
	"  And then will call \`git switch --create \$@\`." \
	"swc|switch-commit:" \
	"  Calls \`git switch --detach \$@\`" \
	"commit:" \
	"  Calls \`git commit \$@\`" \
	"" \
	"  (TODO:here)" \
	"  " \
	"  " \
	"" \
	"" \
	"" \
	"action aliases:" \
	"  'sw-*' -> 'switch-*'" \
	"  'b-*'  -> 'branch-*'" \
	"  'w-*'  -> 'worktree-*'" \
	"  'c'    -> 'commit'" \
	"  (TODO:here)" \
	"  " \
	"  " \
	"(TODO:here)" \
	"" \
	"" \
	"" \
;
exit
esac

echo NOT DONE, DO NOT USE. TODO >&2
exit 123


i=$1
shift
case ${1-} in # consider flipping to longes alias. as error message will show the $i
	switch-*)   i=sw-${i#*-};;
	branch-*)   i=b-${i#*-};;
	worktree-*) i=w-${i#*-};;
esac

case $#:$i in
	0:s) exec git status;; # when 0 args and the action is 's'
esac

case $i in
stat|status) # NOTE: 'stat' is my alias to `status --short`
	exec git "$i" "$@"
	;;
s|sw|switch) # 's' only when non 0 args
		exec git switch "$@"
		#if YN_confirm y "do "
	;;
l|log)
	exec git log-short "$@"
	;;
c|commit)
	case ${1--} in [!-]*)
		set -- --allow-empty --message="$@";; # todo: consider when is right to use allow-empty-message
	esac
	exec git commit --allow-empty --allow-empty-message "$@"
	;;

sw-commit|swc)
	exec git switch --detach "$@"
	;;
sw-new)
	exec git switch --create "$@"
	;;

*)
	printf %s\\n >&2 "unmatched: $#:'$i'"
	exit 2
esac
