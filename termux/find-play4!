#!/bin/sh
case $1 in -x) set -x; shift; esac

fix_su__stderr() {
	case $1 in
		*1) shift; su "$@";;
		*0) shift; {   su "$@"          3>&2 2>&1 1>&3 | cat; } 3>&2 2>&1 1>&3;;
	esac
}

fix_su() { # TODO test me for every case
	# consider writing code test

	# if stdin is not from terminal
	# then both stdout and stderr must not be terminal
	# OR if the script(current subprocess) is in background
	# then all (stdin)?(todo check if its true and not true for first case), stdout and stderr must not be terminal

	# TODO: THERE IS SOME CONNECTION BETWEEN BACKGROUND PROCESS AND STDIN BEING TERMINAL WHILE FORKING.
	# it seems wike closing or redirecting it to null works
	#
	# note:  when in bg but have not closed stdin, use : instead of cat

	if [ -t 0 ]; then t=0; else t=1; fi
	if [ -t 1 ]; then t=${t}0; else t=${t}1; fi
	if [ -t 2 ]; then t=${t}0; else t=${t}1; fi

	fg=$1; shift

	: :::  $fg:$t  ::: :
	#	 : 0 cat ;           su "$@"


	#false &&
	case $fg:$t in
		fg:0??|*:111)                : - cat ;            su "$@";;

		bg:01?)                      : 0 cat ;        fix_su__stderr $t "$@" <&-;;
		bg:00?)                      : 01 cat ;       fix_su__stderr $t "$@" <&- | cat;;

		fg:101|bg:101)               : 1- cat ;           su "$@" | cat;;
		fg:110|bg:110)               : 12 cat ;       fix_su__stderr $t "$@";;
		*)                           : 3 cat ;  cat | fix_su__stderr 0 "$@" | cat;; # only left options should be fg:100
	esac

			# todo: check if stdin must be also not the terminal

}


case $1 in [0-9]*) vol_m0=$(( $1 - 0 ));; *) unset vol_m0; esac

traps='3 15 2'


{

	fix_su bg -c "set -x; echo -- starting su -- ;media volume --set ${vol_m0-24}; echo -- end su --  "
	fix_su bg -c "set -x; echo -- starting su2 -- ;media volume --adj lower; media volume --adj raise; echo -- end su2 --  " & # fix volume level is set but real audio did not change
	trap "trap - $traps; set -x; termux-media-player stop" $traps
	#for i in $traps EXIT; do
	#	trap "echo ---- exits $i ----; trap - 3 15 2 EXIT; set -x; termux-media-player stop" $i
	#done
	termux-media-player play ~/.config/termux-media-player/find-play-song


} 0<&- | cat &  # fix su reands input for no reason


trap "trap - $traps; set -x; termux-media-player stop" EXIT

echo "press enter or kill me \$\$='$$' to stop playign" >&2

if type pause 2>/dev/null 1>&2; then
	pause
else
	echo >&2 Press enter...
	head -1 >/dev/null
fi




























exit

{

#for i in `seq 64`; do trap "echo trap $i" $i; done 


fix_su bg -c "PS4=_+_; set -x; echo --- su starting ---;  sleep .1; media volume --set ${vol-25}; sleep .1; media volume --adj raise; echo ---  su done  ---"
trap "trap - $traps; set -x; termux-media-player stop" $traps
#for i in $traps EXIT; do
#	trap "echo ---- exits $i ----; trap - 3 15 2 EXIT; set -x; termux-media-player stop" $i
#done
termux-media-player play ~/.config/termux-media-player/find-play-song


} 0<&- # fix su reands input for no reason


#trap "trap - $traps; set -x; termux-media-player stop" EXIT

echo "press enter or kill me \$\$='$$' to stop playign" >&2

if type pause 2>/dev/null; then
	pause
else
	echo >&2 Press enter...
	head -1 >/dev/null
fi
