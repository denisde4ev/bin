#!/bin/sh

: "${TRASH_EUID:=$(id -u)}" "${NEW_LINE:="
"}"

err() { printf %s\\n >&2 "${0##*/} $1"; }

case $1 in
--help)
	printf %s\\n \
		"Usage: ${0##*/} [--] <files ...>" \
	;;
'')
	err "pleasa specify <files ...>, see--help"
	exit
esac


get_mount_dir() {
	stat -c %m "$1"
}
# get_mount_dir() {
	# df -- "$1" | sed -ne '$ s/.* //p'
# }

home_mount=$(get_mount_dir ~)

unset had_error
for i; do
	while :; do

	file_mount=$(get_mount_dir "$1") || break


	case "$file_mount" in
	"$home_mount")
		trash_dir=${XDG____todo:-"$HOME/.local/share"}/Trash
		;;
	*)
		trash_dir=$file_mount/.Trash-"$TRASH_EUID"
		;;
	esac
	[ -d "$trash_dir" ] || mkdir -pv "$trash_dir" || break

	case $1 in
	*["$NEW_LINE"]*)
		err "new lines in the filename (\$1='$1') are not allowed"
		break
		;;

	*[!a-zA-Z0-9_./]*|'')
		printf %s\\n >&2 \
		"WARNING: \$1='$1' is in *[!a-zA-Z0-9_./]*|''," \
		"filenames are not escaped by this script" \
		"this might result in error later on" \
		;;
	esac

	trash_file=$trash_dir/files/${1##*/}

	if [ -e "$trash_file" ]; then
		i=1
		trash_file=$trash_file-$i
		while :; do
			trash_file=${trash_file%"-$i"}-$(( i = i + 1 ))
			[ -e "$trash_file" ] || break
			case $i in ??*)
				err "too many attempts to find trash location. reached i=$i, for trash_file=${trash_file%"-$i"}"
				break
			esac
		done
	fi

  mv -vi -- "$1" "$trash_file" || break
	cat <<- EOF > "$trash_dir/files/${1##*/}" || break # TODO:! HOW SHEULD BE THE FILEINFO STRUCTURE
	_file=$1
	EOF

	done
	had_error=$?
done

case ${had_error+x} in x)
	[ "$had_error" -ne 0 ] || exit 1
	exit "$had_error" 
esac
